		// understanding of binary floating Point Numbers:
// decimal Number System:
	*10 <- *10 <- *10 <-.-> /10 -> /10 -> /10
	 _	    _	   _    .    _		 _		_
					  . >> decimal point
// binary Number System:
	*2 <- *2 <- *2 <-.-> /2 -> /2 -> /2
	 _	   _	_    .    _		_	  _
					  . >> binary point

// decimal to binary:
	* (0.625) ==> (?)
	1/ method 1: Add the fraction to itself and *retain the interger until the entire sequence becomes 0*.
	==> 0.625 + 0.625 = 1.250 and 0.25 + 0.25 = 0.50 and 0.5 + 0.5 = 1 and 0.0
	==> 				1  						0					 1
	==> (0.625) == > (0.101)
	2/ method 2
	==> 0.625 * 2 = 1.250 and 0.25 * 2 = 0.50 and 0.5 * 2 = 1.0 and 0.0
	==> 			1					 0   				1
	==> (0.625) == > (0.101)

// Fixed-Point represebtations:
// 24bits : integer part | and | 8bits : fraction.
// Ex : int x = 1234; // represents 0.1234


// floating point represebtations:
// (5.625) ==>(101.101)
// Ex: float x = 3.14159; // stored as (1.570795 x 2^1) + (1 x 2^-20)
// The disadvantage is that they are not exact and may introduce rounding errors or loss of accuracy.

// |========|=================|=================|
// | s:1bit | Exponent: 8bits | Mantissa: 23bits|
// |========|=================|=================|


//https://medium.com/@md.abir1203/cpp-module-02-part-2-9737b5330ed1